{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["copy","x","Object","assign","M","eqn","Node","inline","formula","initialState","b","g","I0","step","tmax","ParameterForm","props","validationSchema","Yup","min","max","required","initialValues","onSubmit","values","handleChange","handleSubmit","Form","noValidate","Row","Group","as","Col","md","controlId","Label","Control","type","name","value","onChange","style","fontSize","Button","className","onClick","App","innerWidth","window","useState","params","setParams","data","createRef","calculate","solution","f","t0","y0","integrator","rk4","t","y","ta","ya","push","simulate","dydt","sirwrapper","S","map","I","R","arr","i","length","susceptible","infected","recovered","current","useEffect","console","log","Navbar","bg","expand","Nav","Brand","href","Container","Provider","variant","disabled","width","height","verticalAlign","align","stroke","strokeDasharray","dataKey","allowDataOverflow","padding","left","right","minTickGap","content","active","payload","label","Card","Body","Title","Text","Math","round","dot","activeDot","r","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.219e9346.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from 'react'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport Mathjax from 'react-mathjax'\nimport rk4 from 'ode-rk4'\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip } from 'recharts'\n\nimport './bootstrap.min.css'\n\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Card from 'react-bootstrap/Card'\n\nimport './App.css'\n\nfunction copy (x) {\n  return Object.assign({}, x)\n}\n\nfunction simulate (f, t0, y0, step, tmax) {\n  var integrator = rk4(y0, f, t0, step)\n  var t = t0\n  var y = y0\n  var ta = []\n  var ya = []\n  ta.push(t0)\n  ya.push(copy(y))\n  while (true) {\n    t = t + step\n    if (t > tmax) break\n    integrator = integrator.step()\n    ya.push(copy(integrator.y))\n    ta.push(t)\n  }\n  return { t: ta, y: ya }\n}\n\nfunction sirwrapper (params) {\n  const sir = (dydt, y, t) => {\n    dydt[0] = -1 * params.b * y[0] * y[1]\n    dydt[1] = params.b * y[0] * y[1] - params.g * y[1]\n    dydt[2] = params.g * y[1]\n  }\n  return sir\n}\n\nfunction M (eqn) {\n  return <Mathjax.Node inline formula={eqn}></Mathjax.Node>\n}\n\nconst initialState = {\n  b: 0.36, // contact rate\n  g: 0.075, // recovery rate\n  I0: 0.01, // initial fraction\n  step: 1,\n  tmax: 60 // time window\n}\n\nfunction ParameterForm (props) {\n  return (\n    <Formik\n      validationSchema={Yup.object({\n        b: Yup.number().min(0).max(1).required(),\n        g: Yup.number().min(0).max(1).required(),\n        I0: Yup.number().min(0).max(1).required(),\n        tmax: Yup.number().min(1).required()\n      })}\n      initialValues={initialState}\n      onSubmit={props.onSubmit}\n    >\n      {({ values, handleChange, handleSubmit }) => (\n        <Form noValidate>\n          <Form.Row>\n            <Form.Group as={Col} md='6' controlId='vf1'>\n              <Form.Label>Initial fractions of infected people {M('I_0')}</Form.Label>\n              <Form.Control\n                type='number'\n                name='I0'\n                value={values.I0}\n                min={0}\n                max={1}\n                step={0.01}\n                onChange={handleChange}\n                style={{ fontSize: '14pt' }}\n              />\n            </Form.Group>\n            <Form.Group as={Col} md='6' controlId='vf2'>\n              <Form.Label>The disease contact rate {M('\\\\beta')}</Form.Label>\n              <Form.Control\n                type='number'\n                name='b'\n                value={values.b}\n                min={0}\n                max={1}\n                step={0.01}\n                onChange={handleChange}\n                style={{ fontSize: '14pt' }}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} md='6' controlId='vf3'>\n              <Form.Label>Recovery rate {M('\\\\gamma')}</Form.Label>\n              <Form.Control\n                type='number'\n                name='g'\n                value={values.g}\n                min={0}\n                max={1}\n                step={0.001}\n                onChange={handleChange}\n                style={{ fontSize: '14pt' }}\n              />\n            </Form.Group>\n            <Form.Group as={Col} md='6' controlId='vf4'>\n              <Form.Label>Time window {M('T_{max}')}</Form.Label>\n              <Form.Control\n                type='number'\n                name='tmax'\n                value={values.tmax}\n                min={10}\n                max={365}\n                step={1}\n                onChange={handleChange}\n                style={{ fontSize: '14pt' }}\n              />\n            </Form.Group>\n            <Form.Group as={Col} md='12' controlId='vf5'>\n              <Button\n                type='button'\n                className='outline'\n                onClick={handleSubmit}\n                style={{ fontSize: '14pt' }}\n              >\n                Calculate\n              </Button>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nconst App = () => {\n  const { innerWidth } = window\n  const [params, setParams] = useState(initialState)\n  const data = createRef()\n\n  const calculate = () => {\n    const solution = simulate(sirwrapper(params), 0, [1.0 - params.I0, params.I0, 0.0], params.step, params.tmax)\n\n    const t = solution.t\n    const S = solution.y.map((x) => { return x[0] })\n    const I = solution.y.map((x) => { return x[1] })\n    const R = solution.y.map((x) => { return x[2] })\n\n    const arr = []\n    for (let i = 0; i < t.length; i++) {\n      arr.push({ susceptible: 100.0 * S[i], infected: 100.0 * I[i], recovered: 100.0 * R[i], name: t[i] })\n    }\n\n    return arr\n  }\n\n  if (!data.current) data.current = calculate()\n\n  useEffect(() => {\n    console.log(innerWidth)\n    data.current = calculate()\n  })\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active) {\n      return (\n        <Card style={{ width: '15rem' }}>\n          <Card.Body style={{ fontSize: '12pt' }}>\n            <Card.Title>Day {label} </Card.Title>\n            <Card.Text>\n              <span>Susceptible : {Math.round(100 * payload[0].value) / 100}%</span> <br />\n              <span>Infected : {Math.round(100 * payload[1].value) / 100}%</span><br />\n              <span>Recovered : {Math.round(100 * payload[2].value) / 100}%</span>\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <>\n      <Navbar bg='light' expand='lg'>\n        <Nav inline='true' className='mr-auto'>\n          <Navbar.Brand><a href='https://github.com/linerocks'>linerocks</a></Navbar.Brand>\n        </Nav>\n      </Navbar>\n      <Container className='mt-5'>\n        <h1 className='header' style={{ fontSize: '48pt' }}>The SIR Epidemic Model</h1>\n        <h4 className='header mb-5'>Simple mathematical modelling of the spread of a disease</h4>\n        <div style={{ fontSize: '14pt' }}>\n          <Mathjax.Provider>\n            <p className='mb-5'>\n              Disease spread can be modelled with one of the epidemiology model so-called\n          compartmental model. This model separates the population {M('N')} in to categories that change over time :\n            </p>\n            <ul className='mt-3'>\n              <li>{M('S(t)')} are those who have not been infected, but susceptible to the disease;</li>\n              <li>{M('I(t)')}  is the number of infectious individuals;</li>\n              <li>{M('R(t)')}  are those individuals who have recovered from the disease and now have immunity to it.</li>\n            </ul>\n\n            The SIR model describes the change in the population of each of these compartments in terms of\n            two parameters, {M('\\\\beta')} and {M('\\\\gamma')}. {M('\\\\beta')} describes the effective contact rate of the disease: an infected\n            individual comes into contact with {M('\\\\beta N')} other individuals per unit time (of which the fraction\n            that are susceptible to contracting the disease is {M('S/N')}). {M('\\\\gamma')} is the mean recovery rate: that is,\n            {M('1 / \\\\gamma')} is the mean period of time during which an infected individual can pass it on.\n            <br />              <br />\n            The differential equations describing this model were first derived by Kermack and McKendrick [1]:\n\n            <Mathjax.Node formula={(`\n              \\\\begin{align}\n                \\\\frac{dS}{dt} &= -\\\\frac{\\\\beta S I}{N}, \\\\\\\\\n                \\\\frac{dI}{dt} &= \\\\frac{\\\\beta S I}{N} - \\\\gamma I, \\\\\\\\\n                \\\\frac{dR}{dt} &= \\\\gamma I. \\\\\\\\\n              \\\\end{align}\n            `)}\n            />\n            <p>\n              Using the differential equation above and parameters below, the dynamics can be plotted as shown.\n            </p>\n            <br />\n            <ParameterForm onSubmit={setParams} className='my-3' />\n            {innerWidth < 800\n              ? (<><Button className='my-5' variant='outline-danger' disabled>Please use desktop or wider monitor resolution or desktop mode if you are in mobile, and then reload the page.</Button></>)\n              : (\n                <>\n                  <Row className='mx-auto d-block justify-content-center mt-5 mb-3'>\n                    <Col className='col-12 '>\n                      <LineChart width={0.55 * innerWidth} height={0.5 * 0.55 * innerWidth} data={data.current}>\n                        <Legend verticalAlign='top' height={36} align='right' />\n                        <CartesianGrid stroke='#ccc' strokeDasharray='1 1' />\n                        <XAxis dataKey='name' allowDataOverflow padding={{ left: 20, right: 20 }} minTickGap={100} />\n                        <YAxis />\n                        <Tooltip content={<CustomTooltip />} />\n                        <Line type='monotone' dataKey='susceptible' stroke='#0000ff' dot={false} activeDot={{ r: 8 }} />\n                        <Line type='monotone' dataKey='infected' stroke='#ff0000' dot={false} activeDot={{ r: 8 }} />\n                        <Line type='monotone' dataKey='recovered' stroke='#00ff00' dot={false} activeDot={{ r: 8 }} />\n                      </LineChart>\n                    </Col>\n                  </Row>\n                </>\n              )}\n          </Mathjax.Provider>\n\n          <div className='my-5'>\n            <p>Reference</p>\n            <ol className='mt-0'>\n              <li>Kermack, W. O. and McKendrick, A. G. \"A Contribution to the Mathematical Theory of Epidemics.\" Proc. Roy. Soc. Lond. A 115, 700-721, 1927.</li>\n              <li>\n                <a href='https://scipython.com/book/chapter-8-scipy/additional-examples/the-sir-epidemic-model/'>\n                  https://scipython.com/book/chapter-8-scipy/additional-examples/the-sir-epidemic-model/\n                </a>\n              </li>\n              <li>\n                <a href='https://towardsdatascience.com/modelling-the-coronavirus-epidemic-spreading-in-a-city-with-python-babd14d82fa2'>\n                  https://towardsdatascience.com/modelling-the-coronavirus-epidemic-spreading-in-a-city-with-python-babd14d82fa2\n                </a>\n              </li>\n            </ol>\n          </div>\n        </div>\n      </Container>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}